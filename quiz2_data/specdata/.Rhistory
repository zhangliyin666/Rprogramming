library(RColorBrewer)
n <- 7
mycolors <- brewer.pal(n,'Set1')
barplot(rep(1,n),col = mycolors)
n <- 7
mycolors <- brewer.pal(n,'Set1')
barplot(rep(1,n),col = mycolors)
demo()
x <- c(1:10)
y <- x
z<- 1/x
opar <- par(no.readonly = TRUE)
par(mar=c(5,4,4,8)+0.1)
plot(x,y,type = 'b',
pch=21,col='red',
yaxt='n',lty=3,ann = FALSE)
lines(x,z,type = 'b',pch=22,col='blue',lty=2)
axis(2,at=x,labels = x,col.axis='red',las=2)
axis(4,at=z,labels = round(z,digits = 2),
col.axis='blue',las=2,cex.axis=0.7,tck=-0.1)
mtext('y=1/x',side = 4,line = 3,cex.lab=1,las=2,col = 'blue')
title('an example of creative axes',
xlab = 'x values',
ylab = 'y = x')
par(opar)
expression_matrix <- readRDS(url("http://staff.washington.edu/hpliner/data/packer_embryo_expression.rds"))
cell_metadata <- readRDS(url("http://staff.washington.edu/hpliner/data/packer_embryo_colData.rds"))
gene_annotation <- readRDS(url("http://staff.washington.edu/hpliner/data/packer_embryo_rowData.rds"))
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
library(monocle)
cds <- new_cell_data_set(expression_matrix,
cell_metadata = cell_metadata,
gene_metadata = gene_annotation)
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install_github("jmzeng1314/AnnoProbe")
library(devtools)
install_github("jmzeng1314/AnnoProbe")
install.packages(AnnoProbe)
install.packages("D:/R-4.0.1/library/AnnoProbe-master.zip", repos = NULL, type = "win.binary")
install.packages("D:/R-4.0.1/library/AnnoProbe.zip", repos = NULL, type = "win.binary")
install_github("jmzeng1314/AnnoProbe")
library(BiocManager)
BiocManager::install("GEOquery")
install_github("jmzeng1314/AnnoProbe")
library(AnnoProbe.zip)
library(AnnoProbe)
.libpaths()
？.libPaths
.libPaths()
.libPaths()
#下载RNA-seq的count数据
library(dplyr)
library(DT)
library(SummarizedExperiment)
library(TCGAbiolinks)
#workflow.type = "BCGSC miRNA Profiling")
query_mi <- GDCquery(project = cancer_type,
data.category = "Transcriptome Profiling",
data.type = "miRNA Expression Quantification",
workflow.type = "BCGSC miRNA Profiling")
cancer_type = "TCGA-LUAD"
query_mi <- GDCquery(project = cancer_type,
data.category = "Transcriptome Profiling",
data.type = "miRNA Expression Quantification",
workflow.type = "BCGSC miRNA Profiling")
GDCdownload(query_mi,method = "api",files.per.chunk = 50)
expdat <- GDCprepare(query = query_mi)
count_matrix = assay(expdat)
View(expdat)
count_matrix = assay(expdat)
View(expdat)
library(SummarizedExperiment)
count_matrix = assay(expdat)
count_matrix = assay(expdat,summerizedexpriment = F)
devtools::install_github('satijalab/seurat-data')
install.packages("glue")
devtools::install_github('satijalab/seurat-data')
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
library(rmarkdown)
update.packages(ask = FALSE, checkBuilt = TRUE)
detach("package:rmarkdown", unload = TRUE)
tinytex::tlmgr_update()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
library(BiocManager)
BiocManager::install("ArrayExpress")
library(ArrayExpress)
library(RSQLite)
setwd("D:/coursera/rprogramming/specdata/")
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
#part3
corr <- function(directory,threshold = 0){
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- "D:/coursera/rprogramming/specdata"
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i],row.names = F)
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
## Return a numeric vector of correlations
dat
## NOTE: Do not round the result!
}
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
a <- read.csv(files_full[1])
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- "D:/coursera/rprogramming/specdata"
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
a <- read.csv(files_full[1])
View(a)
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- "D:/coursera/rprogramming/specdata"
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
mon1_1 <- read.csv(files_full[1])
View(mon1_1)
csum <- sum((!is.na(mon1_1$sulfate)) & (!is.na(mon1_1$nitrate)))
csum > threshold
threshold = 0
csum > threshold
tmp <- mon1_1[which(!is.na(mon1_1$sulfate)), ]
View(tmp)
submon1_1 <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submon1_1$sulfate, submon1_1$nitrate))
## Return a numeric vector of correlations
dat
cr <- corr("specdata", 150)
cr <- corr(directory, 150)
getwd()
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
# Example Usage
corr(directory = 'D:/coursera/rprogramming/specdata', threshold = 150)
?rbindlist
library(data.table)
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
# Example Usage
corr(directory = 'D:/coursera/rprogramming/specdata', threshold = 150)
#part3
corr <- function(directory,threshold = 0){
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
directory <- "D:/coursera/rprogramming/specdata"
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i])
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
## Return a numeric vector of correlations
dat
## NOTE: Do not round the result!
}
cr <- corr(directory, 150)
?read.table
#part3
corr <- function(directory,threshold = 0){
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i])
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
## Return a numeric vector of correlations
dat
## NOTE: Do not round the result!
}
cr <- corr(directory = 'D:/coursera/rprogramming/specdata', 150)
cr <- corr("specdata", 150)
cr <- corr('D:/coursera/rprogramming/specdata', 150)
#test
corr(directory = 'D:/coursera/rprogramming/specdata', threshold = 150)
#part3
corr <- function(directory, threshold = 0) {
# Reading in all files and making a large data.table
lst <- lapply(file.path(directory, list.files(path = directory, pattern="*.csv")), data.table::fread)
dt <- rbindlist(lst)
# Only keep completely observed cases
dt <- dt[complete.cases(dt),]
# Apply threshold
dt <- dt[, .(nobs = .N, corr = cor(x = sulfate, y = nitrate)), by = ID][nobs > threshold]
return(dt[, corr])
}
#test
corr(directory = 'D:/coursera/rprogramming/specdata', threshold = 150)
cr <- corr('D:/coursera/rprogramming/specdata', 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
cr <- corr("D:/coursera/rprogramming/specdata", 400)
head(cr)
source("pollutantmean.R")
source("complete.R")
source("corr.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
getwd()
cr <- corr("D:/coursera/rprogramming/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- corr("D:/coursera/rprogramming/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
cr <- corr("D:/coursera/rprogramming/specdata", 2000)
n <- length(cr)
cr <- corr("D:/coursera/rprogramming/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
